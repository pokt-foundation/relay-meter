name: Lint, Test and Push to Google Artifact Registry

on:
  push:
    branches:
      - main
      - staging

env:
  PROJECT_ID: portal-gb-prod
  REGISTRY: us-central1-docker.pkg.dev
  COLLECTOR_IMAGE: relay-meter-collector
  COLLECTOR_REPO: relay-meter-collector
  SERVER_IMAGE: relay-meter-server
  SERVER_REPO: relay-meter-server

jobs:
  # TODO Put Lint step back once golangci-lint changes addressed in separate PR
  # lint:
  #   name: Lint
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Go
  #       uses: actions/setup-go@v2
  #       with:
  #         go-version: 1.18
  #     - name: Check out code
  #       uses: actions/checkout@v3
  #     - name: Run Golang ci Action
  #       uses: golangci/golangci-lint-action@v3

  test:
    name: Test
    runs-on: ubuntu-22.04
    steps:
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Unit tests
        with:
          environment-variables: |
            ENABLE_WRITING= ${{ secrets.ENABLE_WRITING }}
        run: go test ./...  -short

      - name: Run Driver tests
        run: make test_driver

      - name: Build the Docker test stack
        run: docker-compose -f ./testdata/docker-compose.test.yml up -d --build

      - name: Run E2E test
        run: go test ./... -run E2E -count=1

  tag:
    name: Semantic Release Tag
    runs-on: ubuntu-22.04
    needs: [test]
    outputs:
      new: ${{ steps.semantic.outputs.new-release-published }}
      version: ${{ steps.semantic.outputs.release-version }}

    steps:
      - uses: actions/checkout@v3

      - name: Tag Semantic Release Version
        id: semantic
        uses: codfish/semantic-release-action@v2
        with:
          branches: |
            [
              'main',
              {
                name: 'staging',
                prerelease: 'rc'
              }
            ]
          tag_format: "v${version}"
          additional_packages: |
            ['@semantic-release/commit-analyzer']
          plugins: |
            ['@semantic-release/commit-analyzer']

  push-docker-collector:
    name: Push Collector Docker Image to GAR
    if: needs.tag.outputs.new == 'true'
    runs-on: ubuntu-latest
    needs: [test, tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v0.6.0"
        with:
          credentials_json: "${{ secrets.COLLECTOR_GCP_CREDENTIALS }}"
          token_format: "access_token"

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: "${{ env.REGISTRY }}"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build, Tag and Push Collector to Dockerhub
        uses: docker/build-push-action@v3
        with:
          build-args: GITHUB_TOKEN=${{ secrets.GH_ACCESS_TOKEN }}
          context: .
          file: Dockerfile.production.collector
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.COLLECTOR_REPO }}/${{ env.COLLECTOR_IMAGE }}:${{ needs.tag.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.COLLECTOR_REPO }}/${{ env.COLLECTOR_IMAGE }}:latest

  push-docker-apiserver:
    name: Push API Server Docker Image to GAR
    if: needs.tag.outputs.new == 'true'
    runs-on: ubuntu-latest
    needs: [test, tag]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: "Authenticate to Google Cloud"
        id: "auth"
        uses: "google-github-actions/auth@v0.6.0"
        with:
          credentials_json: "${{ secrets.SERVER_GCP_CREDENTIALS }}"
          token_format: "access_token"

      - name: Login to Google Artifact Registry
        uses: docker/login-action@v2
        with:
          registry: "${{ env.REGISTRY }}"
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build, Tag and Push to Dockerhub
        uses: docker/build-push-action@v3
        with:
          build-args: GITHUB_TOKEN=${{ secrets.GH_ACCESS_TOKEN }}
          context: .
          file: Dockerfile.production.apiserver
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVER_REPO }}/${{ env.SERVER_IMAGE }}:${{ needs.tag.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.SERVER_REPO }}/${{ env.SERVER_IMAGE }}:latest
