name: Staging deployment us-west-2

on:
  workflow_run:
    workflows: ["Build & Test"]
    branches: [staging]
    types:
      - completed

jobs:
  deploy:
    name: Relay meter
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR (Collector)
        id: build-image-collector
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: relay-meter-collector-staging
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production.collector .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push image to Amazon ECR (API)
        id: build-image-api-server
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: relay-meter-server-staging
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.production.apiserver .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID / us-west-2 - collector
        id: task-def-us-west-2-collector
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: .aws/ecs-task-definition-staging.json
          container-name: relay-meter-collector-staging
          image: ${{ steps.build-image-collector.outputs.image }}
          environment-variables: |
            INFLUXDB_URL=${{ secrets.STAGING_INFLUXDB_URL }}
            POSTGRES_HOST=${{ secrets.STAGING_POSTGRES_HOST }}
            POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
            INFLUXDB_TOKEN=${{ secrets.INFLUXDB_TOKEN }}
            INFLUXDB_ORG=${{ secrets.INFLUXDB_ORG }}
            INFLUXDB_BUCKET_DAILY=${{ secrets.INFLUXDB_BUCKET_DAILY }}
            INFLUXDB_BUCKET_CURRENT=${{ secrets.INFLUXDB_BUCKET_CURRENT }}
            COLLECTION_INTERVAL_SECONDS=${{ secrets.COLLECTION_INTERVAL_SECONDS }}
            ENV_REPORT_INTERVAL_SECONDS=${{ secrets.ENV_REPORT_INTERVAL_SECONDS }}
            POSTGRES_PORT=5432
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

      - name: Fill in the new image ID / us-west-2 - server
        id: task-def-us-west-2-server
        uses: aws-actions/amazon-ecs-render-task-definition@master
        with:
          task-definition: ${{ steps.task-def-us-west-2-collector.outputs.task-definition }}
          container-name: relay-meter-server-staging
          image: ${{ steps.build-image-api-server.outputs.image }}
          environment-variables: |
            POSTGRES_HOST=${{ secrets.STAGING_POSTGRES_HOST }}
            POSTGRES_PASSWORD=${{ secrets.STAGING_POSTGRES_PASSWORD }}
            BACKEND_API_URL=${{ secrets.STAGING_BACKEND_API_URL }}
            BACKEND_API_TOKEN=${{ secrets.STAGING_BACKEND_API_TOKEN }}
            API_SERVER_PORT=80
            POSTGRES_PORT=5432
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}

      - name: Deploy / us-west-2
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-us-west-2-server.outputs.task-definition }}
          service: relay-meter-staging
          cluster: relay-meter
          wait-for-service-stability: true
