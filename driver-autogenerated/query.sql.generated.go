// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package postgresdriver

import (
	"context"
	"time"

	"github.com/lib/pq"
	"github.com/pokt-foundation/portal-db/v2/types"
)

const insertHTTPSourceRelayCount = `-- name: InsertHTTPSourceRelayCount :exec
INSERT INTO http_source_relay_count (portal_app_id, day, success, error)
VALUES ($1, $2, $3, $4)
ON CONFLICT (portal_app_id, day) DO UPDATE
    SET success = http_source_relay_count.success + excluded.success,
        error = http_source_relay_count.error + excluded.error
`

type InsertHTTPSourceRelayCountParams struct {
	PortalAppID types.PortalAppID `json:"portalAppID"`
	Day         time.Time         `json:"day"`
	Success     int64             `json:"success"`
	Error       int64             `json:"error"`
}

func (q *Queries) InsertHTTPSourceRelayCount(ctx context.Context, arg InsertHTTPSourceRelayCountParams) error {
	_, err := q.db.ExecContext(ctx, insertHTTPSourceRelayCount,
		arg.PortalAppID,
		arg.Day,
		arg.Success,
		arg.Error,
	)
	return err
}

const insertHTTPSourceRelayCounts = `-- name: InsertHTTPSourceRelayCounts :exec
INSERT INTO http_source_relay_count (portal_app_id, day, success, error)
SELECT
    unnest($1::char(64)[]) AS portal_app_id,
    unnest($2::date[]) AS day,
    unnest($3::bigint[]) AS success,
    unnest($4::bigint[]) AS error
ON CONFLICT (portal_app_id, day) DO UPDATE
    SET success = http_source_relay_count.success + excluded.success,
        error = http_source_relay_count.error + excluded.error
`

type InsertHTTPSourceRelayCountsParams struct {
	Column1 []string    `json:"column1"`
	Column2 []time.Time `json:"column2"`
	Column3 []int64     `json:"column3"`
	Column4 []int64     `json:"column4"`
}

func (q *Queries) InsertHTTPSourceRelayCounts(ctx context.Context, arg InsertHTTPSourceRelayCountsParams) error {
	_, err := q.db.ExecContext(ctx, insertHTTPSourceRelayCounts,
		pq.Array(arg.Column1),
		pq.Array(arg.Column2),
		pq.Array(arg.Column3),
		pq.Array(arg.Column4),
	)
	return err
}

const selectHTTPSourceRelayCounts = `-- name: SelectHTTPSourceRelayCounts :many
SELECT portal_app_id, day, success, error
FROM http_source_relay_count
WHERE day BETWEEN $1 AND $2
`

type SelectHTTPSourceRelayCountsParams struct {
	Day   time.Time `json:"day"`
	Day_2 time.Time `json:"day2"`
}

func (q *Queries) SelectHTTPSourceRelayCounts(ctx context.Context, arg SelectHTTPSourceRelayCountsParams) ([]HttpSourceRelayCount, error) {
	rows, err := q.db.QueryContext(ctx, selectHTTPSourceRelayCounts, arg.Day, arg.Day_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []HttpSourceRelayCount
	for rows.Next() {
		var i HttpSourceRelayCount
		if err := rows.Scan(
			&i.PortalAppID,
			&i.Day,
			&i.Success,
			&i.Error,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
